generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  firstName     String
  lastName      String
  email         String        @unique
  password      String
  role          UserRole      @default(USER)
  phoneNumber   String?
  address       Json?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  profileDetail Json?         @default("{}")
  organization  Organization?

  @@map("users")
}

model Organization {
  id           String     @id @default(uuid())
  ownerId      String     @unique
  name         String
  description  String     @default("")
  socialLinks  String[]   @default([])
  categories   Int[]
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  bannerDetail Json?      @default("{}")
  events       Event[]
  followers    Follower[]
  user         User       @relation(fields: [ownerId], references: [id])

  @@map("organizations")
}

model Event {
  id             String        @id @default(uuid())
  organizationId String?
  title          String
  summary        String
  status         EventStatus   @default(PUBLIC)
  startDate      DateTime      @db.Timestamp(6)
  endDate        DateTime      @db.Timestamp(6)
  location       Json
  coverImages    Json[]      @default([])
  coverVideos    String[]      @default([])
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  organization   Organization? @relation(fields: [organizationId], references: [id])
  tickets        Ticket[]

  @@map("events")
}

model PaymentDetail {
  id            String   @id @default(uuid())
  userId        String
  eventId       String
  amount        Decimal  @db.Decimal(10, 2)
  ticketsBought Int
  paymentMethod String
  paymentDate   DateTime @db.Timestamp(6)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("payment_details")
}

model Categorie {
  id            Int      @id @default(autoincrement())
  name          String
  subCategories String[]

  @@map("categories")
}

model Follower {
  id             String        @id @default(uuid())
  userId         String
  organizationId String?
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  organization   Organization? @relation(fields: [organizationId], references: [id])

  @@map("followers")
}

// todo: if possible add the payment method enum also 
model Ticket {
  id              String   @id @default(uuid())
  eventId         String
  type            TicketsTypes  @default(REGULAR)
  availableQty    Int
  perTicketPrice  Float
  salesStart      DateTime
  salesEnd        DateTime
  sold            Int      @default(0)
  paymentMethod   String
  discount        Json?
  event           Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

enum TicketsTypes {
  VIP
  REGULAR
  EARLY_BUYERS
}

enum UserRole {
  USER
  SELLER
}

enum EventStatus {
  UPCOMING
  PAST
  DRAFT
  PUBLIC
  PRIVATE
}
